void dfs(int row,int col,vector<vector<char>>& grid,vector<vector<int>>& visited){
    int n=grid.size();
    int m=grid[0].size();
    visited[row][col]=1;
    int drow[]={-1,0,1,0};
    int dcol[]={0,-1,0,1};
    for(int i=0;i<4;i++){
        int nrow=row+drow[i];
        int ncol=col+dcol[i];
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && visited[nrow][ncol]!=1 && grid[nrow][ncol]=='1'){
            dfs(nrow,ncol,grid,visited);
        }
    }
}
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>visited(n,vector<int>(m,0));
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && !visited[i][j]){
                    count++;
                    dfs(i,j,grid,visited);
                }
            }
        }
    return count;
    }
Time complexicity-O(NxM);
Space complexicity-O(NxM);
